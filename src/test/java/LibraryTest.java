import org.junit.Before;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'ptang' at '8/4/15 1:34 PM' with Gradle 2.5
 *
 * @author ptang, @date 8/4/15 1:34 PM
 */
public class LibraryTest {
    private Library library;
    private List<Book> listOfBooks;
    private Console console;
    private PrintStream printStream;
    private BufferedReader bufferedReader;

    @Before
    public void setup() {
        printStream = mock(PrintStream.class);
        listOfBooks = new ArrayList<>();
        bufferedReader = mock(BufferedReader.class);
        library = new Library(listOfBooks, printStream, bufferedReader);
    }

    @Test
    public void shouldProduceWelcomeWhenOpen() {
        assertThat(library.open(), is("Welcome to the Library! Biblioteca is available!"));
    }

    @Test
    public void shouldListNothingWhenLibraryCreatedWithNoBooks() {
        library.listAllBooks();
        verifyZeroInteractions(printStream);
    }

    @Test
    public void shouldListAllBooksWhenLibraryCreatedWithBooks() {
        Book book1 = mock(Book.class);
        listOfBooks.add(book1);
        Book book2 = mock(Book.class);
        listOfBooks.add(book2);
        when(book1.canBeCheckedOut()).thenReturn(true);
        when(book2.canBeCheckedOut()).thenReturn(true);

        library.listAllBooks();
        verify(printStream, times(2)).println(anyString());
    }

    @Test
    public void shouldNotListBookWhenBookIsCheckedOut() {
        Book bookNotAvailable = mock(Book.class);
        when(bookNotAvailable.canBeCheckedOut()).thenReturn(false);
        when(bookNotAvailable.toString()).thenReturn("Book");

        verify(printStream, never()).println("Book");

    }

    @Test
    public void shouldAddBookToListWhenBookAddedToEmptyList() throws Exception {
        Book book1 = mock(Book.class);

        library.addBook(book1);

        assertThat(listOfBooks.get(0), is(book1));

    }

    @Test
    public void shouldListIDNumberOfBookWhenListBooks() throws Exception {
        Book book1 = mock(Book.class);
        listOfBooks.add(book1);
        when(book1.canBeCheckedOut()).thenReturn(true);

        library.listAllBooks();

        verify(printStream).println(contains("1 |"));
    }

    @Test
    public void shouldRequestUserInputWhenCheckingOutBook() throws Exception {
        library.checkOutBook();

        verify(bufferedReader).readLine();
    }

    @Test
    public void shouldPromptUserToInputBookNumberWhenCheckingOutBook() throws Exception {
        library.checkOutBook();

        verify(printStream).println(contains("Please enter the book ID:"));

    }

    @Test
    public void shouldTryToCheckOutBookWhenUserInputsBookToCheckOut() throws Exception {
        Book book1 = mock(Book.class);
        listOfBooks.add(book1);
        when(bufferedReader.readLine()).thenReturn("1");
        when(book1.canBeCheckedOut()).thenReturn(true);
        library.checkOutBook();

        verify(book1).checkOut();

    }

    @Test
    public void shouldPrintMessageWhenBookHasSuccessfullyCheckedOut() throws Exception {
        Book book = mock(Book.class);
        listOfBooks.add(book);
        when(bufferedReader.readLine()).thenReturn("1");
        when(book.canBeCheckedOut()).thenReturn(true);

        library.checkOutBook();

        verify(printStream).println(contains("Thank you! Enjoy the book"));




    }

    @Test
    public void shouldCheckIfBookCanBeCheckedOutWhenUserWantsToCheckOutBook() throws Exception {
        Book book = mock(Book.class);
        listOfBooks.add(book);
        when(bufferedReader.readLine()).thenReturn("1");
        library.checkOutBook();
        verify(book).canBeCheckedOut();

    }

    @Test
    public void shouldNotCheckedOutBookWhenBookIsUnavailable() throws Exception {
        Book book = mock(Book.class);
        listOfBooks.add(book);
        when(bufferedReader.readLine()).thenReturn("1");
        when(book.canBeCheckedOut()).thenReturn(false);
        library.checkOutBook();
        verify(book, never()).checkOut();

    }
}
